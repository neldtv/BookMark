前言:

ios 编译器llvm 采用三相设计法  将编译器 切分为  前段 中端 后端三部分，前端根据代码(Object-C/c/c++)生成中间代码IR  中端优化后  后端根据架构不同(x86/arm)生成对应的机器码。

前段：
1.预编译  所有#开头的命令都可以视作预编译内容,比如#import，它会将需要导入的文件内容导入当前文件.另外类似#define定义标识，常数、宏函数等 而#ifdefine 用来筛选代码片段
减少代码体积,节约内存。
2.接着LLVM clang将会检查词法 比如 变量 运算符这类 
3.接着LLVM clang将代码生成抽象代码树(AST).
4.然后clang根据生成的抽象代码树 检查语法错误
5.生成中间代码 IR（interMediater Representaion）

中端:
1.根据前段生成的IR 进行优化IR(Optimize) 优化逻辑 优化内存  生成汇编

后端
1.根据不同的平台(X86/ARM),再将汇编生成对应平台的二进制可执行文件MACH-O,此处会通过链接器(LLD)将各个mach-o可执行文件链接起来,静态库文件/动态库文件也会一并
链接。lld在链接mach-o文件时，会维护一张记录方法名-方法地址的表，这个有点类似消息机制里的通过sel找imp，将方法和地址绑定, 动态库并不会在此时加载进来，这张
映射表,只会先绑定方法名,在后面runtime阶段从动态库中查找方法地址，完成绑定。



